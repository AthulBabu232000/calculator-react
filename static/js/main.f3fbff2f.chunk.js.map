{"version":3,"sources":["components/Button.js","components/Screen.js","App.js","reportWebVitals.js","index.js"],"names":["Button","className","onClick","props","getNum","label","this","Component","Screen","children","result","input","math","create","all","App","state","setter","bind","value","valuate","clearIt","el","setState","ans","evaluate","err","alert","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3fbff2f.chunk.js","sourcesContent":["import \"./Button.css\";\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass Button extends Component {\r\n\r\n    render(){\r\n        return(\r\n            \r\n           <div className = \"button-wrapper\">\r\n               <button className = \"button\"  onClick = {() =>this.props.getNum(this.props.label)}>{this.props.label}</button>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button\r\n","import \"./Screen.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Screen extends Component {\r\n \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"display\">\r\n          {this.props.children}\r\n        <div className = \"result\">{this.props.result}</div>\r\n        <div className=\"input\">{this.props.input}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import \"./App.css\";\nimport { create, all } from \"mathjs\";\nimport React, { Component } from \"react\";\nimport Button from \"./components/Button\";\nimport Screen from \"./components/Screen\";\nconst config = {};\nconst math = create(all, config);\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: \"\",\n      input: \"\",\n    };\n    this.setter = this.setter.bind(this);\n    this.value = this.value.bind(this);\n    this.valuate = this.valuate.bind(this);\n    this.clearIt = this.clearIt.bind(this);\n  }\n\n  setter(el) {\n    this.setState({\n      input: this.state.input + el,\n    });\n  }\n\n  valuate() {\n    try {\n      const ans = math.evaluate(this.state.input);\n      this.setState({\n        result: ans,\n      });\n    } catch (err) {\n      alert(err)\n     this.clearIt()\n    }\n  }\n\n  value(e) {\n    this.setter(e);\n  }\n\n  clearIt() {\n    this.setState({\n      result: \"\",\n      input: \"\",\n    });\n  }\n\n  render() {\n   const  styleIt = {\n      backgroundColor:\"orange\",\n      color:\"green\"\n       };\n      return (\n        <div className=\"calculator\">\n          <Screen result={this.state.result} input={this.state.input}></Screen>\n          <div className=\"row\">\n            <Button label=\".\" getNum={this.value}></Button>\n            <Button label=\"0\" getNum={this.value}></Button>\n            <Button label=\"-\" getNum={this.value}></Button>\n            <Button label=\"=\" getNum={this.valuate}></Button>\n          </div>\n          <div className=\"row\">\n            <Button label=\"9\" getNum={this.value}></Button>\n            <Button label=\"8\" getNum={this.value}></Button>\n            <Button label=\"7\" getNum={this.value}></Button>\n            <Button label=\"/\" getNum={this.value}></Button>\n          </div>\n          <div className=\"row\">\n            <Button label=\"6\" getNum={this.value}></Button>\n            <Button label=\"5\" getNum={this.value}></Button>\n            <Button label=\"4\" getNum={this.value}></Button>\n            <Button label=\"*\" getNum={this.value}></Button>\n          </div>\n          <div className=\"row\">\n            <Button label=\"3\" getNum={this.value}></Button>\n            <Button label=\"2\" getNum={this.value}></Button>\n            <Button label=\"1\" getNum={this.value}></Button>\n            <Button label=\"+\" getNum={this.value}></Button>\n          </div>\n\n          <div className=\"row\">\n            <Button label=\"CLEAR\" getNum={this.clearIt}></Button>\n          </div>\n        </div>\n      );\n    \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}